//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ToTheHeights
{
    public partial class @PlayerInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""EditorInput"",
            ""id"": ""e0dcdbe9-93d1-48bc-bda1-d27154b34161"",
            ""actions"": [
                {
                    ""name"": ""Motion"",
                    ""type"": ""Button"",
                    ""id"": ""bfa90a3b-f930-4189-a0c8-b349a9833251"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""a3eb2313-94af-4718-b43e-6edb68c91bf9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""00303d18-31dd-4861-91fd-98ed3fb45d11"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9b08cfe4-bacb-41d1-8e49-234d3fef407b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // EditorInput
            m_EditorInput = asset.FindActionMap("EditorInput", throwIfNotFound: true);
            m_EditorInput_Motion = m_EditorInput.FindAction("Motion", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // EditorInput
        private readonly InputActionMap m_EditorInput;
        private IEditorInputActions m_EditorInputActionsCallbackInterface;
        private readonly InputAction m_EditorInput_Motion;
        public struct EditorInputActions
        {
            private @PlayerInput m_Wrapper;
            public EditorInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Motion => m_Wrapper.m_EditorInput_Motion;
            public InputActionMap Get() { return m_Wrapper.m_EditorInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(EditorInputActions set) { return set.Get(); }
            public void SetCallbacks(IEditorInputActions instance)
            {
                if (m_Wrapper.m_EditorInputActionsCallbackInterface != null)
                {
                    @Motion.started -= m_Wrapper.m_EditorInputActionsCallbackInterface.OnMotion;
                    @Motion.performed -= m_Wrapper.m_EditorInputActionsCallbackInterface.OnMotion;
                    @Motion.canceled -= m_Wrapper.m_EditorInputActionsCallbackInterface.OnMotion;
                }
                m_Wrapper.m_EditorInputActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Motion.started += instance.OnMotion;
                    @Motion.performed += instance.OnMotion;
                    @Motion.canceled += instance.OnMotion;
                }
            }
        }
        public EditorInputActions @EditorInput => new EditorInputActions(this);
        public interface IEditorInputActions
        {
            void OnMotion(InputAction.CallbackContext context);
        }
    }
}
